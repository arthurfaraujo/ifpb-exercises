---
import fs from "node:fs/promises";

export async function getStaticPaths({ paginate }) {
  const allExercises = await (await Astro.glob("../*/README.*")).filter((exercise) => {
    return !exercise.url.split("/")[3].startsWith("_");
  });

  const allTags = await Promise.all(await allExercises.map(async (exercise, index) => {
    const { subjects, areas, challenge } = exercise.frontmatter;

    const slug = exercise.url.split("/")[3];

    const codes = await fs.readdir(`./src/pages/exercises/${slug}/_codes`);

    const tags = [
      ...subjects,
      ...areas,
      ...codes,
    ];

    if (challenge) {
      tags.push("desafio");
    }

    allExercises[index].frontmatter.tags = tags;

    return tags;
  }));

  const filters = [...new Set(allTags.flat())];

  const pages = filters.map(async (tag) => {
    const filteredExercises = allExercises.filter(({frontmatter: { tags }}) => {
      return tags.some((filter) => filter === tag);
    });

    return await paginate(filteredExercises, {
      params: { tag },
      pageSize: 12
    });
  });

  return await Promise.all(pages);
}

const { page } = Astro.props;
const { tag } = Astro.params;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="./favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Exercícios de {tag}</title>
  </head>
  <body class="bg-gray-100">
    <div class="container mx-auto px-4">
      <h1 class="text-center py-10 text-4xl font-bold">Exercícios de {tag}</h1>
      <div class="grid gap-5 grid-cols-3">
        {
          page.data.map((exercise, index) => {
            const slug = exercise.url.split("/")[3];

            return (
              <div class="max-w-sm rounded-md overflow-hidden shadow-lg hover:scale-105 transition duration-500 bg-white py-2 px-4">
                <a href={`/exercises/exercises/${slug}/`} class="no-underline cursor-pointer">
                  <h2 class="pb-3 font-bold">#{index + 1 + (page.currentPage - 1) * page.size} - {exercise.frontmatter.title}</h2>
                </a>
                <nav>
                  {exercise.frontmatter.tags.map((tag) => {
                    return (
                      <a href={`/exercises/exercises/${tag}/1`} class="no-underline cursor-pointer">
                        <span class="py-1 text-sm font-semibold text-gray-700 mr-1">
                          {tag}
                        </span>
                      </a>
                    )
                  })}
                </nav>
              </div>
            )
          })
        }
      </div>
      { (page.lastPage > 1) && (
        <div class="mt-12 flex items-center flex-wrap justify-center">
          <nav aria-label="Page navigation">
            <ul class="flex flex-row">
              <li><a href={'/exercises' + page.url.prev} class="px-4 py-2 text-slate-600 transition-colors duration-150 bg-white border border-r-0 border-slate-600 rounded-l-lg focus:shadow-outline hover:bg-slate-100">&laquo;</a></li>
              {
                [...Array(page.lastPage).keys()].map((pageNumber) => pageNumber + 1).map((pageNumber) => (
                  pageNumber === page.currentPage ?
                    <li><a href={`./${pageNumber}`} class="px-4 py-2 text-white transition-colors duration-150 bg-slate-600 border border-r-0 border-slate-600 focus:shadow-outline">{pageNumber}</a></li>:
                    <li><a href={`./${pageNumber}`} class="px-4 py-2 text-slate-600 transition-colors duration-150 bg-white border border-r-0 border-slate-600 focus:shadow-outline">{pageNumber}</a></li>
                ))
              }
              <li><a href={'/exercises' + page.url.next} class="px-4 py-2 text-slate-600 transition-colors duration-150 bg-white border border-slate-600 rounded-r-lg focus:shadow-outline hover:bg-slate-100">&raquo;</a></li>
            </ul>
          </nav>
        </div>
        )}
    </div>
  </body>
</html>


